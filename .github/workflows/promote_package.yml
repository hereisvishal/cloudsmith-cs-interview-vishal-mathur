name: Promote Python Package

on:
  repository_dispatch:
    types: [cloudsmith-package-synchronized]

env:
  CLOUDSMITH_NAMESPACE: ${{ vars.CLOUDSMITH_NAMESPACE }}
  CLOUDSMITH_STAGING_REPO: 'staging'
  CLOUDSMITH_PRODUCTION_REPO: 'production'
  CLOUDSMITH_SERVICE_SLUG: ${{ vars.CLOUDSMITH_SERVICE_SLUG }}
  PACKAGE_NAME: 'example_package'

permissions:
  id-token: write  # Required for OIDC authentication
  contents: read   # Needed for repository access

jobs:
  promote:
    runs-on: ubuntu-latest

    steps:
      - name: Debug GitHub OIDC Token
        run: |
          echo "Fetching OIDC Token from GitHub..."
          if [ -z "$ACTIONS_ID_TOKEN_REQUEST_URL" ]; then
            echo "Error: ACTIONS_ID_TOKEN_REQUEST_URL is not set!"
            exit 1
          fi

          RESPONSE=$(curl -s -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
                          "$ACTIONS_ID_TOKEN_REQUEST_URL")

          echo "Raw OIDC Response:"
          echo "$RESPONSE"

          # Extract the actual token value from JSON
          TOKEN=$(echo "$RESPONSE" | jq -r '.value')

          # Check if the extracted token is empty
          if [ -z "$TOKEN" ] || [ "$TOKEN" == "null" ]; then
            echo "Error: Extracted OIDC token is empty!"
            exit 1
          fi

          echo "OIDC Token Extracted!"
          echo "$TOKEN" > oidc_token.json

      - name: Fetch OIDC Token Using GitHub CLI
        run: |
          echo "Attempting to retrieve token with GitHub CLI..."
          gh auth setup-git
          TOKEN=$(gh api /repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/id-token)
          echo "GitHub CLI Token Response:"
          echo "$TOKEN"
        env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          
      - name: Upload OIDC Token as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: oidc-token
          path: oidc_token.json

      - name: Save OIDC Token
        run: |
          echo "$RESPONSE" > oidc_token.json
      - name: Upload OIDC Token as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: oidc-token
          path: oidc_token.json


      - name: Install Cloudsmith CLI
        uses: cloudsmith-io/cloudsmith-cli-action@v1.0.1
        with:
          oidc-namespace: ${{ env.CLOUDSMITH_NAMESPACE }}
          oidc-service-slug: ${{ env.CLOUDSMITH_SERVICE_SLUG }}

      - name: Debug Cloudsmith Authentication
        run: |
          echo "Testing Cloudsmith authentication..."
          cloudsmith whoami || echo "Failed to authenticate with Cloudsmith"

      - name: Tag Package as Ready for Production
        run: |
          PACKAGE_QUERY="filename:${PACKAGE_NAME}-${{ github.event.client_payload.package_version }}.tar.gz"
          echo "Searching for package with query: $PACKAGE_QUERY"
          
          PACKAGE_DATA=$(cloudsmith list package ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }} -q "$PACKAGE_QUERY" -F json)
          
          IDENTIFIER=$(echo "$PACKAGE_DATA" | jq -r '.data[0].identifier_perm')
          
          if [ -z "$IDENTIFIER" ] || [ "$IDENTIFIER" = "null" ]; then
            echo "Failed to find package identifier"
            exit 1
          fi
          
          echo "Found package identifier: $IDENTIFIER"
          
          cloudsmith tag add ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }}/$IDENTIFIER ready-for-production

      - name: Get all packages tagged 'ready-for-production' and promote
        run: |
          PACKAGE_DATA=$(cloudsmith list package ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }} -q "tag:ready-for-production" -F json)
          
          IDENTIFIERS=$(echo "$PACKAGE_DATA" | jq -r '.data[].identifier_perm')

          if [ -z "$IDENTIFIERS" ]; then
            echo "No packages found with 'ready-for-production' tag"
            exit 1
          fi

          echo "Promoting the following packages:"
          echo "$IDENTIFIERS"
          
          for ID in $IDENTIFIERS; do
            cloudsmith mv --yes \
              ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }}/$ID \
              ${{ env.CLOUDSMITH_PRODUCTION_REPO }}
          done
